#!/bin/bash

# Script de validation du pipeline GitLab CI/CD
# Ce script v√©rifie que tous les √©l√©ments n√©cessaires sont en place

set -e

echo "üîç Validation du pipeline GitLab CI/CD - SparkFit Backend"
echo "=================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK")
            echo -e "${GREEN}‚úÖ $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}"
            ;;
    esac
}

# Fonction pour v√©rifier si un fichier existe
check_file() {
    local file=$1
    local description=$2
    if [ -f "$file" ]; then
        print_status "OK" "$description trouv√©: $file"
        return 0
    else
        print_status "ERROR" "$description manquant: $file"
        return 1
    fi
}

# Fonction pour v√©rifier si une commande est disponible
check_command() {
    local cmd=$1
    local description=$2
    if command -v "$cmd" &> /dev/null; then
        print_status "OK" "$description disponible: $cmd"
        return 0
    else
        print_status "WARNING" "$description non disponible: $cmd"
        return 1
    fi
}

# Variables pour le suivi des erreurs
errors=0
warnings=0

echo ""
print_status "INFO" "V√©rification des fichiers de configuration..."

# V√©rifier les fichiers essentiels
check_file ".gitlab-ci.yml" "Pipeline GitLab CI/CD" || ((errors++))
check_file "Dockerfile" "Dockerfile" || ((errors++))
check_file "package.json" "Package.json" || ((errors++))
check_file "entrypoint.sh" "Script d'entr√©e Docker" || ((errors++))
check_file "CI_CD_README.md" "Documentation CI/CD" || ((errors++))
check_file "env.example" "Fichier d'exemple des variables d'environnement" || ((warnings++))

echo ""
print_status "INFO" "V√©rification de la structure du projet..."

# V√©rifier la structure des r√©pertoires
if [ -d "src" ]; then
    print_status "OK" "R√©pertoire src trouv√©"
else
    print_status "ERROR" "R√©pertoire src manquant"
    ((errors++))
fi

if [ -d "tests" ]; then
    print_status "OK" "R√©pertoire tests trouv√©"
else
    print_status "WARNING" "R√©pertoire tests manquant"
    ((warnings++))
fi

if [ -d "prisma" ]; then
    print_status "OK" "R√©pertoire prisma trouv√©"
else
    print_status "WARNING" "R√©pertoire prisma manquant (sera copi√© depuis la racine)"
    ((warnings++))
fi

echo ""
print_status "INFO" "V√©rification des d√©pendances..."

# V√©rifier package.json
if [ -f "package.json" ]; then
    # V√©rifier les scripts n√©cessaires
    if grep -q '"test"' package.json; then
        print_status "OK" "Script test trouv√© dans package.json"
    else
        print_status "ERROR" "Script test manquant dans package.json"
        ((errors++))
    fi
    
    if grep -q '"test:coverage"' package.json; then
        print_status "OK" "Script test:coverage trouv√© dans package.json"
    else
        print_status "WARNING" "Script test:coverage manquant dans package.json"
        ((warnings++))
    fi
    
    # V√©rifier les d√©pendances essentielles
    if grep -q '"jest"' package.json; then
        print_status "OK" "Jest trouv√© dans les d√©pendances"
    else
        print_status "ERROR" "Jest manquant dans les d√©pendances"
        ((errors++))
    fi
    
    if grep -q '"@prisma/client"' package.json; then
        print_status "OK" "Prisma Client trouv√© dans les d√©pendances"
    else
        print_status "ERROR" "Prisma Client manquant dans les d√©pendances"
        ((errors++))
    fi
fi

echo ""
print_status "INFO" "V√©rification de la syntaxe YAML..."

# V√©rifier la syntaxe du pipeline GitLab CI
if command -v "yamllint" &> /dev/null; then
    if yamllint .gitlab-ci.yml &> /dev/null; then
        print_status "OK" "Syntaxe YAML du pipeline valide"
    else
        print_status "ERROR" "Erreur de syntaxe YAML dans le pipeline"
        ((errors++))
    fi
else
    print_status "WARNING" "yamllint non disponible, impossible de v√©rifier la syntaxe YAML"
    ((warnings++))
fi

echo ""
print_status "INFO" "V√©rification des outils de d√©veloppement..."

# V√©rifier les outils de d√©veloppement
check_command "node" "Node.js" || ((errors++))
check_command "npm" "npm" || ((errors++))
check_command "docker" "Docker" || ((warnings++))

# V√©rifier la version de Node.js
if command -v "node" &> /dev/null; then
    node_version=$(node --version)
    print_status "INFO" "Version Node.js: $node_version"
fi

echo ""
print_status "INFO" "V√©rification de la configuration Docker..."

# V√©rifier le Dockerfile
if [ -f "Dockerfile" ]; then
    # V√©rifier les √©l√©ments essentiels du Dockerfile
    if grep -q "FROM node" Dockerfile; then
        print_status "OK" "Image de base Node.js trouv√©e dans Dockerfile"
    else
        print_status "ERROR" "Image de base Node.js manquante dans Dockerfile"
        ((errors++))
    fi
    
    if grep -q "EXPOSE" Dockerfile; then
        print_status "OK" "Port expos√© trouv√© dans Dockerfile"
    else
        print_status "WARNING" "Aucun port expos√© trouv√© dans Dockerfile"
        ((warnings++))
    fi
    
    if grep -q "CMD" Dockerfile; then
        print_status "OK" "Commande de d√©marrage trouv√©e dans Dockerfile"
    else
        print_status "ERROR" "Commande de d√©marrage manquante dans Dockerfile"
        ((errors++))
    fi
fi

echo ""
print_status "INFO" "V√©rification de la configuration Prisma..."

# V√©rifier si le sch√©ma Prisma existe √† la racine
if [ -d "../sparkfit_prisma-schema" ]; then
    print_status "OK" "R√©pertoire sparkfit_prisma-schema trouv√© √† la racine"
    
    if [ -f "../sparkfit_prisma-schema/schema.prisma" ]; then
        print_status "OK" "Sch√©ma Prisma trouv√©"
    else
        print_status "ERROR" "Sch√©ma Prisma manquant dans sparkfit_prisma-schema"
        ((errors++))
    fi
    
    if [ -d "../sparkfit_prisma-schema/migrations" ]; then
        print_status "OK" "R√©pertoire migrations trouv√©"
    else
        print_status "WARNING" "R√©pertoire migrations manquant dans sparkfit_prisma-schema"
        ((warnings++))
    fi
else
    print_status "ERROR" "R√©pertoire sparkfit_prisma-schema manquant √† la racine"
    ((errors++))
fi

echo ""
print_status "INFO" "V√©rification des variables d'environnement..."

# V√©rifier si un fichier .env existe
if [ -f ".env" ]; then
    print_status "WARNING" "Fichier .env trouv√© (ne pas commiter ce fichier)"
    ((warnings++))
else
    print_status "OK" "Aucun fichier .env trouv√© (correct)"
fi

echo ""
print_status "INFO" "V√©rification de la s√©curit√©..."

# V√©rifier .gitignore
if [ -f ".gitignore" ]; then
    if grep -q "\.env" .gitignore; then
        print_status "OK" ".env est dans .gitignore"
    else
        print_status "WARNING" ".env n'est pas dans .gitignore"
        ((warnings++))
    fi
    
    if grep -q "node_modules" .gitignore; then
        print_status "OK" "node_modules est dans .gitignore"
    else
        print_status "WARNING" "node_modules n'est pas dans .gitignore"
        ((warnings++))
    fi
else
    print_status "WARNING" "Fichier .gitignore manquant"
    ((warnings++))
fi

echo ""
print_status "INFO" "R√©sum√© de la validation..."

# Afficher le r√©sum√©
echo "=================================================="
if [ $errors -eq 0 ] && [ $warnings -eq 0 ]; then
    print_status "OK" "Validation r√©ussie ! Aucune erreur ni avertissement."
    echo ""
    print_status "INFO" "Prochaines √©tapes :"
    echo "1. Configurer les variables d'environnement dans GitLab"
    echo "2. Activer le Container Registry dans GitLab"
    echo "3. Configurer les cl√©s SSH pour le d√©ploiement"
    echo "4. Tester le pipeline avec un commit"
    exit 0
elif [ $errors -eq 0 ]; then
    print_status "WARNING" "Validation termin√©e avec $warnings avertissement(s)"
    echo ""
    print_status "INFO" "Le pipeline devrait fonctionner, mais v√©rifiez les avertissements."
    exit 0
else
    print_status "ERROR" "Validation √©chou√©e avec $errors erreur(s) et $warnings avertissement(s)"
    echo ""
    print_status "INFO" "Corrigez les erreurs avant de d√©ployer le pipeline."
    exit 1
fi 