# ========================================
# GITLAB CI/CD - SPARKFIT BACKEND
# ========================================
# Ce fichier dit √† GitLab quoi faire quand vous poussez du code
# C'est comme une recette de cuisine automatis√©e !

# ========================================
# √âTAPES DE LA PIPELINE
# ========================================
# Les √©tapes s'ex√©cutent dans cet ordre :
# 1. test ‚Üí 2. build ‚Üí 3. deploy
stages:
  - test      # V√©rifier que le code fonctionne
  - build     # Cr√©er l'image Docker
  - deploy    # Mettre en ligne (optionnel)

# ========================================
# VARIABLES GLOBALES
# ========================================
# Ces variables sont utilis√©es partout dans la pipeline
variables:
  # Image Docker de base (Node.js 18)
  NODE_IMAGE: "node:18-alpine"
  # Nom de notre application
  APP_NAME: "sparkfit-backend"
  # Port de l'application
  PORT: "3000"

# ========================================
# √âTAPE 1: TESTS
# ========================================
# Cette √©tape v√©rifie que votre code fonctionne
test:
  # Seulement sur les branches develop et main
  only:
    - develop
    - main
  
  # Nom de l'√©tape
  stage: test
  
  # Image Docker √† utiliser
  image: $NODE_IMAGE
  
  # Services n√©cessaires (base de donn√©es pour les tests)
  services:
    - postgres:13-alpine
  
  # Variables d'environnement pour les tests
  variables:
    # Configuration de la base de donn√©es de test
    POSTGRES_DB: "test_db"
    POSTGRES_USER: "test_user"
    POSTGRES_PASSWORD: "test_password"
    DATABASE_URL: "postgresql://test_user:test_password@postgres:5432/test_db"
    NODE_ENV: "test"
    JWT_SECRET: "test-secret-key"
  
  # Scripts √† ex√©cuter (comme des commandes dans le terminal)
  script:
    # 1. Afficher des informations utiles
    - echo "üöÄ D√©but des tests"
    - echo "üìÅ R√©pertoire: $CI_PROJECT_DIR"
    - echo "üîß Branche: $CI_COMMIT_REF_SLUG"
    
    # 2. Installer les d√©pendances du backend
    - echo "üì¶ Installation des d√©pendances backend..."
    - npm ci
    
    # 3. Installer les d√©pendances Prisma
    - echo "üóÑÔ∏è Installation des d√©pendances Prisma..."
    - cd ../sparkfit_prisma-schema
    - npm ci
    - cd ../sparkfit_backend
    
    # 4. Attendre que la base de donn√©es soit pr√™te
    - echo "‚è≥ Attente de la base de donn√©es..."
    - sleep 10
    
    # 5. G√©n√©rer le client Prisma
    - echo "üîß G√©n√©ration du client Prisma..."
    - npx prisma generate --schema=../sparkfit_prisma-schema/schema.prisma
    
    # 6. Appliquer les migrations de base de donn√©es
    - echo "üóÑÔ∏è Application des migrations..."
    - npx prisma migrate deploy --schema=../sparkfit_prisma-schema/schema.prisma
    
    # 7. Ex√©cuter les tests
    - echo "üß™ Ex√©cution des tests..."
    - npm test
    
    # 8. Afficher le r√©sultat
    - echo "‚úÖ Tests termin√©s avec succ√®s!"
  
  # Fichiers √† conserver apr√®s les tests
  artifacts:
    # Conserver les rapports de couverture
    paths:
      - coverage/
    # Conserver pendant 1 semaine
    expire_in: 1 week

# ========================================
# √âTAPE 2: CONSTRUCTION DOCKER
# ========================================
# Cette √©tape cr√©e une image Docker de votre application
build:
  # Seulement si les tests passent et sur develop/main
  only:
    - develop
    - main
  
  # Nom de l'√©tape
  stage: build
  
  # Utiliser Docker pour construire Docker
  image: docker:20.10.16
  
  # Service Docker n√©cessaire
  services:
    - docker:20.10.16-dind
  
  # Variables pour Docker
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$CI_PROJECT_DIR/certs/client"
  
  # Scripts √† ex√©cuter
  script:
    # 1. Afficher des informations
    - echo "üî® D√©but de la construction Docker"
    - echo "üì¶ Application: $APP_NAME"
    
    # 2. Construire l'image Docker
    - echo "üèóÔ∏è Construction de l'image..."
    - docker build -t $APP_NAME:$CI_COMMIT_SHORT_SHA .
    - docker build -t $APP_NAME:latest .
    
    # 3. Afficher les images cr√©√©es
    - echo "üìã Images construites:"
    - docker images | grep $APP_NAME
    
    # 4. Tester l'image rapidement
    - echo "üß™ Test rapide de l'image..."
    - docker run --rm $APP_NAME:$CI_COMMIT_SHORT_SHA node --version
    
    # 5. Afficher le r√©sultat
    - echo "‚úÖ Construction termin√©e!"
  
  # Fichiers √† conserver
  artifacts:
    paths:
      - docker-images/
    expire_in: 1 month

# ========================================
# √âTAPE 3: D√âPLOIEMENT STAGING
# ========================================
# Cette √©tape met l'application en ligne pour les tests
deploy_staging:
  # Seulement sur develop
  only:
    - develop
  
  # Nom de l'√©tape
  stage: deploy
  
  # Image simple
  image: alpine:latest
  
  # Scripts √† ex√©cuter
  script:
    - echo "üöÄ D√©ploiement en staging..."
    - echo "üì¶ Application: $APP_NAME"
    - echo "üîß Version: $CI_COMMIT_SHORT_SHA"
    
    # Ici vous ajouteriez vos commandes de d√©ploiement
    # Par exemple pour Kubernetes :
    # - kubectl set image deployment/sparkfit-backend sparkfit-backend=$APP_NAME:$CI_COMMIT_SHORT_SHA
    # - kubectl rollout status deployment/sparkfit-backend
    
    - echo "‚úÖ D√©ploiement staging termin√©!"
  
  # Environnement de d√©ploiement
  environment:
    name: staging
    url: https://staging.sparkfit.com

# ========================================
# √âTAPE 4: D√âPLOIEMENT PRODUCTION
# ========================================
# Cette √©tape met l'application en production
deploy_production:
  # Seulement sur main
  only:
    - main
  
  # Nom de l'√©tape
  stage: deploy
  
  # Image simple
  image: alpine:latest
  
  # Scripts √† ex√©cuter
  script:
    - echo "üöÄ D√©ploiement en production..."
    - echo "üì¶ Application: $APP_NAME"
    - echo "üîß Version: $CI_COMMIT_SHORT_SHA"
    
    # Ici vous ajouteriez vos commandes de d√©ploiement
    # Par exemple pour Kubernetes :
    # - kubectl set image deployment/sparkfit-backend sparkfit-backend=$APP_NAME:$CI_COMMIT_SHORT_SHA
    # - kubectl rollout status deployment/sparkfit-backend
    
    - echo "‚úÖ D√©ploiement production termin√©!"
  
  # Environnement de d√©ploiement
  environment:
    name: production
    url: https://sparkfit.com
  
  # D√©ploiement manuel (n√©cessite une validation humaine)
  when: manual

# ========================================
# CONFIGURATIONS OPTIONNELLES
# ========================================

# Cache pour acc√©l√©rer les builds
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/
    - ../sparkfit_prisma-schema/node_modules/

# ========================================
# COMMENT UTILISER CETTE PIPELINE
# ========================================
# 
# 1. Poussez du code sur 'develop' :
#    git push origin develop
#    ‚Üí Lance automatiquement : test ‚Üí build ‚Üí staging
#
# 2. Mettez en production (sur 'main') :
#    git checkout main
#    git merge develop
#    git push origin main
#    ‚Üí Lance automatiquement : test ‚Üí build ‚Üí production (manuel)
#
# 3. Surveillez sur GitLab :
#    - Allez dans votre projet
#    - Cliquez sur "CI/CD" ‚Üí "Pipelines"
#    - Cliquez sur un pipeline pour voir les d√©tails
#
# ========================================
