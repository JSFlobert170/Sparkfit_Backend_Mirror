image: node:18

services:
  - name: postgres:15-alpine
    alias: postgres

variables:
  POSTGRES_DB: testdb
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpassword
  DATABASE_URL: "postgresql://testuser:testpassword@postgres:5432/testdb?schema=public"
  NODE_ENV: test

stages:
  - test
  - migrate
  - build
  - deploy

cache:
  paths:
    - node_modules/

before_script:
  # Installer les d√©pendances backend
  - npm ci

test:
  stage: test
  script:
    - echo "Debut des tests"
    - echo "Repertoire actuel: $PWD"
    - echo "Copie du schema Prisma"
    - mkdir -p prisma
    - cp ../sparkfit_prisma-schema/schema.prisma prisma/
    - cp -r ../sparkfit_prisma-schema/migrations prisma/
    - echo "Generation client Prisma"
    - npx prisma generate --schema=./prisma/schema.prisma
    - echo "Attente de PostgreSQL"
    - sleep 10
    - echo "Tests"
    - npm test
    - echo "Tests termines"

migrate:
  stage: migrate
  script:
    - echo "Copie du schema Prisma"
    - mkdir -p prisma
    - cp ../sparkfit_prisma-schema/schema.prisma prisma/
    - cp -r ../sparkfit_prisma-schema/migrations prisma/
    - echo "Generation client Prisma"
    - npx prisma generate --schema=./prisma/schema.prisma
    - echo "Attente de PostgreSQL"
    - sleep 10
    - echo "Migrations"
    - npx prisma migrate deploy --schema=./prisma/schema.prisma

build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$CI_PROJECT_DIR/certs/client"
  script:
    - echo "Construction Docker"
    - echo "Contexte de build depuis le repertoire parent"
    - cd ..
    - echo "Build avec Dockerfile: sparkfit_backend/Dockerfile"
    - docker build -t sparkfit-backend:$CI_COMMIT_SHORT_SHA -f sparkfit_backend/Dockerfile .
    - docker build -t sparkfit-backend:latest -f sparkfit_backend/Dockerfile .
    - echo "Images construites"
    - docker images | grep sparkfit-backend
    - echo "Test image"
    - docker run --rm sparkfit-backend:$CI_COMMIT_SHORT_SHA node --version
    - echo "Construction terminee"

deploy:
  stage: deploy
  when: manual
  script:
    - echo "Deploiement manuel a adapter selon ton infrastructure"
