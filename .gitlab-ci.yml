image: node:18

services:
  - name: postgres:15-alpine
    alias: postgres

variables:
  NODE_ENV: test
  POSTGRES_DB: mydatabase
  POSTGRES_USER: myuser
  POSTGRES_PASSWORD: mypassword
  DATABASE_URL: 'postgresql://myuser:mypassword@postgres:5432/mydatabase?schema=public'

stages:
  - prepare
  - lint
  - prisma-check
  - test
  - security
  # - build
  # - docker-scan
  # - deploy-staging
  # - deploy
  # - rollback
  - deploy
  - release

cache:
  paths:
    - node_modules/

before_script:
  - apt-get update && apt-get install -y postgresql-client
  - npm ci
  - until pg_isready -h postgres -p 5432 -U $POSTGRES_USER; do echo "Waiting for postgres..."; sleep 2; done

generate:
  stage: prepare
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
  script:
    # - git clone https://$GITLAB_USER:$GITLAB_TOKEN@gitlab.com/JSFlobert/sparkfit_prisma-schema.git
    - git clone https://gitlab.com/JSFlobert/sparkfit_prisma-schema.git
    - mkdir -p prisma
    - cp sparkfit_prisma-schema/schema.prisma prisma/
    - cp -r sparkfit_prisma-schema/migrations prisma/
    - rm -rf sparkfit_prisma-schema
    - ls -la prisma/
    - cat prisma/schema.prisma
    - npx prisma generate --schema=prisma/schema.prisma
  artifacts:
    paths:
      - prisma

eslint:
  stage: lint
  needs: [generate]
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
  script:
    - echo "Linting code with ESLint..."
    - npm run lint
  allow_failure: false

prettier:
  stage: lint
  needs: [generate]
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
  script:
    - echo "Checking code format with Prettier..."
    - npm run format:check
  allow_failure: false

prisma_check:
  stage: prisma-check
  image: node:20
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
  script:
    - npx prisma validate
    - npx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma

test:
  stage: test
  needs: [eslint, generate]
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
  script:
    - npx prisma migrate dev --name migration
    - npm test
    - echo "$CI_REGISTRY"
    - echo "$CI_REGISTRY_USER"
    - echo "$CI_REGISTRY_PASSWORD"
    - echo "$CI_REGISTRY_IMAGE"
    - echo "$CI_COMMIT_REF_SLUG"
  dependencies:
    - generate

dependency_check:
  stage: security
  image: node:18
  script:
    - npm ci
    - npm run deps:update
    # - npm audit --production
    # - npm outdated || true
    - npm run deps:check || true
  only:
    - merge_requests
    - main
    - develop
  allow_failure: true

# docker_scan:
#   stage: docker-scan
#   image: docker:latest
#   services:
#     - docker:dind
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
#   script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#     - docker build -f sparkfit_backend/Dockerfile -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
#     - docker scan --accept-license "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" || true
#   allow_failure: true
#   needs: [build_docker]

# build_docker:
#   stage: build
#   needs: [test]
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
#   image: docker:latest
#   services:
#     - docker:dind
#   variables:
#     DOCKER_HOST: tcp://docker:2375
#     DOCKER_TLS_CERTDIR: ''
#   script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#     - docker build -f sparkfit_backend/Dockerfile -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
#     - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"

# deploy_staging:
#   stage: deploy-staging
#   image: node:18
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop"'
#   script:
#     - echo "Trigger Render staging deploy"
#     - curl -X POST "https://api.render.com/deploy/srv-d215b3vfte5s73f3ajf0?key=u2qib-5adtk"

# deploy:
#   stage: deploy
#   image: node:18
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#   script:
#     - echo "Trigger Render deploy"
#     - curl -X POST "https://api.render.com/deploy/srv-d215b3vfte5s73f3ajf0?key=u2qib-5adtk"

# rollback:
#   stage: rollback
#   image: docker:latest
#   services:
#     - docker:dind
#   when: manual
#   script:
#     - echo "Rolling back to previous Docker image..."
#     - PREV_TAG=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/0/tags" | jq -r '.[1].name')
#     - docker pull "$CI_REGISTRY_IMAGE:$PREV_TAG"
#     - docker tag "$CI_REGISTRY_IMAGE:$PREV_TAG" "$CI_REGISTRY_IMAGE:latest"
#     - docker push "$CI_REGISTRY_IMAGE:latest"

mirror_to_github:
  stage: deploy
  only:
    - main
    - develop
  script:
    - git config --global user.email "flobertjohnson@gmail.com"
    - git config --global user.name "Flobert"
    - git remote add github https://$GITHUB_TOKEN@github.com/JSFlobert170/SparkFit_Backend.git
    - git push github HEAD:$CI_COMMIT_REF_NAME

release:
  stage: release
  image: node:18
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"'
  script:
    - npm ci
    - npx semantic-release
  variables:
    GITLAB_TOKEN: $GITLAB_TOKEN
