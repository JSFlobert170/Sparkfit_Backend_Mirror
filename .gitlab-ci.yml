stages:
  - test
  - build

variables:
  NODE_IMAGE: "node:18-alpine"
  APP_NAME: "sparkfit-backend"

test:
  stage: test
  image: $NODE_IMAGE
  services:
    - postgres:13-alpine
  variables:
    POSTGRES_DB: "test_db"
    POSTGRES_USER: "test_user"
    POSTGRES_PASSWORD: "test_password"
    DATABASE_URL: "postgresql://test_user:test_password@postgres:5432/test_db"
    NODE_ENV: "test"
    JWT_SECRET: "test-secret-key"
    PORT: "3001"
  script:
    - echo "Debut des tests"
    - echo "Repertoire actuel: $PWD"
    - echo "Installation des dependances"
    - npm install
    - echo "Copie du schema Prisma"
    - mkdir -p prisma
    - cp ../sparkfit_prisma-schema/schema.prisma prisma/
    - cp -r ../sparkfit_prisma-schema/migrations prisma/
    - echo "Generation client Prisma"
    - npx prisma generate --schema=./prisma/schema.prisma
    - echo "Attente de PostgreSQL"
    - sleep 10
    - echo "Migrations"
    - npx prisma migrate deploy --schema=./prisma/schema.prisma
    - echo "Tests"
    - npm test
    - echo "Tests termines"
  artifacts:
    paths:
      - coverage/
    expire_in: 1 week

build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$CI_PROJECT_DIR/certs/client"
  script:
    - echo "Construction Docker"
    - echo "Contexte de build depuis le repertoire parent"
    - cd ..
    - echo "Build avec Dockerfile: sparkfit_backend/Dockerfile"
    - docker build -t $APP_NAME:$CI_COMMIT_SHORT_SHA -f sparkfit_backend/Dockerfile .
    - docker build -t $APP_NAME:latest -f sparkfit_backend/Dockerfile .
    - echo "Images construites"
    - docker images | grep $APP_NAME
    - echo "Test image"
    - docker run --rm $APP_NAME:$CI_COMMIT_SHORT_SHA node --version
    - echo "Construction terminee"
  artifacts:
    paths:
      - docker-images/
    expire_in: 1 month

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/
