# ========================================
# GITLAB CI/CD - SPARKFIT BACKEND
# ========================================
# Ce fichier dit à GitLab quoi faire quand vous poussez du code
# C'est comme une recette de cuisine automatisée !

# ========================================
# ÉTAPES DE LA PIPELINE
# ========================================
# Les étapes s'exécutent dans cet ordre :
# 1. test → 2. build → 3. deploy
stages:
  - test      # Vérifier que le code fonctionne
  - build     # Créer l'image Docker
  - deploy    # Mettre en ligne (optionnel)

# ========================================
# VARIABLES GLOBALES
# ========================================
# Ces variables sont utilisées partout dans la pipeline
variables:
  # Image Docker de base (Node.js 18)
  NODE_IMAGE: "node:18-alpine"
  # Nom de notre application
  APP_NAME: "sparkfit-backend"
  # Port de l'application
  PORT: "3000"

# ========================================
# ÉTAPE 1: TESTS
# ========================================
# Cette étape vérifie que votre code fonctionne
test:
  # Seulement sur les branches develop et main
  only:
    - develop
    - main
  
  # Nom de l'étape
  stage: test
  
  # Image Docker à utiliser
  image: $NODE_IMAGE
  
  # Services nécessaires (base de données pour les tests)
  services:
    - postgres:13-alpine
  
  # Variables d'environnement pour les tests
  variables:
    # Configuration de la base de données de test
    POSTGRES_DB: "test_db"
    POSTGRES_USER: "test_user"
    POSTGRES_PASSWORD: "test_password"
    DATABASE_URL: "postgresql://test_user:test_password@postgres:5432/test_db"
    NODE_ENV: "test"
    JWT_SECRET: "test-secret-key"
  
  # Scripts à exécuter (comme des commandes dans le terminal)
  script:
    - echo "🚀 Début des tests"
    - echo "📁 Répertoire: $CI_PROJECT_DIR"
    - echo "🔧 Branche: $CI_COMMIT_REF_SLUG"
    - echo "📦 Installation des dépendances backend..."
    - npm ci
    - echo "🗄️ Installation des dépendances Prisma..."
    - cd ../sparkfit_prisma-schema
    - npm ci
    - cd ../sparkfit_backend
    - echo "⏳ Attente de la base de données..."
    - sleep 10
    - echo "🔧 Génération du client Prisma..."
    - npx prisma generate --schema=../sparkfit_prisma-schema/schema.prisma
    - echo "🗄️ Application des migrations..."
    - npx prisma migrate deploy --schema=../sparkfit_prisma-schema/schema.prisma
    - echo "🧪 Exécution des tests..."
    - npm test
    - echo "✅ Tests terminés avec succès!"
  
  # Fichiers à conserver après les tests
  artifacts:
    # Conserver les rapports de couverture
    paths:
      - coverage/
    # Conserver pendant 1 semaine
    expire_in: 1 week

# ========================================
# ÉTAPE 2: CONSTRUCTION DOCKER
# ========================================
# Cette étape crée une image Docker de votre application
build:
  # Seulement si les tests passent et sur develop/main
  only:
    - develop
    - main
  
  # Nom de l'étape
  stage: build
  
  # Utiliser Docker pour construire Docker
  image: docker:20.10.16
  
  # Service Docker nécessaire
  services:
    - docker:20.10.16-dind
  
  # Variables pour Docker
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$CI_PROJECT_DIR/certs/client"
  
  # Scripts à exécuter
  script:
    - echo "🔨 Début de la construction Docker"
    - echo "📦 Application: $APP_NAME"
    - echo "🏗️ Construction de l'image..."
    - docker build -t $APP_NAME:$CI_COMMIT_SHORT_SHA .
    - docker build -t $APP_NAME:latest .
    - echo "📋 Images construites:"
    - docker images | grep $APP_NAME
    - echo "🧪 Test rapide de l'image..."
    - docker run --rm $APP_NAME:$CI_COMMIT_SHORT_SHA node --version
    - echo "✅ Construction terminée!"
  
  # Fichiers à conserver
  artifacts:
    paths:
      - docker-images/
    expire_in: 1 month

# ========================================
# ÉTAPE 3: DÉPLOIEMENT STAGING
# ========================================
# Cette étape met l'application en ligne pour les tests
deploy_staging:
  # Seulement sur develop
  only:
    - develop
  
  # Nom de l'étape
  stage: deploy
  
  # Image simple
  image: alpine:latest
  
  # Scripts à exécuter
  script:
    - echo "🚀 Déploiement en staging..."
    - echo "📦 Application: $APP_NAME"
    - echo "🔧 Version: $CI_COMMIT_SHORT_SHA"
    - echo "✅ Déploiement staging terminé!"
  
  # Environnement de déploiement
  environment:
    name: staging
    url: https://staging.sparkfit.com

# ========================================
# ÉTAPE 4: DÉPLOIEMENT PRODUCTION
# ========================================
# Cette étape met l'application en production
deploy_production:
  # Seulement sur main
  only:
    - main
  
  # Nom de l'étape
  stage: deploy
  
  # Image simple
  image: alpine:latest
  
  # Scripts à exécuter
  script:
    - echo "🚀 Déploiement en production..."
    - echo "📦 Application: $APP_NAME"
    - echo "🔧 Version: $CI_COMMIT_SHORT_SHA"
    - echo "✅ Déploiement production terminé!"
  
  # Environnement de déploiement
  environment:
    name: production
    url: https://sparkfit.com
  
  # Déploiement manuel (nécessite une validation humaine)
  when: manual

# ========================================
# CONFIGURATIONS OPTIONNELLES
# ========================================

# Cache pour accélérer les builds
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/
    - ../sparkfit_prisma-schema/node_modules/

# ========================================
# COMMENT UTILISER CETTE PIPELINE
# ========================================
# 
# 1. Poussez du code sur 'develop' :
#    git push origin develop
#    → Lance automatiquement : test → build → staging
#
# 2. Mettez en production (sur 'main') :
#    git checkout main
#    git merge develop
#    git push origin main
#    → Lance automatiquement : test → build → production (manuel)
#
# 3. Surveillez sur GitLab :
#    - Allez dans votre projet
#    - Cliquez sur "CI/CD" → "Pipelines"
#    - Cliquez sur un pipeline pour voir les détails
#
# ========================================
