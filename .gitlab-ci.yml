image: node:18

services:
  - name: postgres:15-alpine
    alias: postgres

variables:
  NODE_ENV: test
  POSTGRES_DB: mydatabase
  POSTGRES_USER: myuser
  POSTGRES_PASSWORD: mypassword
  DATABASE_URL: 'postgresql://myuser:mypassword@postgres:5432/mydatabase?schema=public'

stages:
  # - prepare
  # - lint
  # - prisma-check
  # - test
  # - security
  # - build
  # - docker-scan
  # - deploy-staging
  # - deploy
  # - rollback
  - mirror
  - release

cache:
  paths:
    - node_modules/

# before_script:
#   - apt-get update && apt-get install -y postgresql-client
#   - npm ci
#   - until pg_isready -h postgres -p 5432 -U $POSTGRES_USER; do echo "Waiting for postgres..."; sleep 2; done

# generate:
#   stage: prepare
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
#   script:
#     # - git clone https://$GITLAB_USER:$GITLAB_TOKEN@gitlab.com/JSFlobert/sparkfit_prisma-schema.git
#     - git clone https://gitlab.com/JSFlobert/sparkfit_prisma-schema.git
#     - mkdir -p prisma
#     - cp sparkfit_prisma-schema/schema.prisma prisma/
#     - cp -r sparkfit_prisma-schema/migrations prisma/
#     - rm -rf sparkfit_prisma-schema
#     - ls -la prisma/
#     - cat prisma/schema.prisma
#     - npx prisma generate --schema=prisma/schema.prisma
#   artifacts:
#     paths:
#       - prisma

# eslint:
#   stage: lint
#   needs: [generate]
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
#   script:
#     - echo "Linting code with ESLint..."
#     - npm run lint
#   allow_failure: false

# prettier:
#   stage: lint
#   needs: [generate]
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
#   script:
#     - echo "Checking code format with Prettier..."
#     - npm run format:check
#   allow_failure: false

# prisma_check:
#   stage: prisma-check
#   image: node:20
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
#   script:
#     - npx prisma validate
#     - npx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma

# test:
#   stage: test
#   needs: [eslint, generate]
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
#   script:
#     - npx prisma migrate dev --name migration
#     - npm test
#     - echo "$CI_REGISTRY"
#     - echo "$CI_REGISTRY_USER"
#     - echo "$CI_REGISTRY_PASSWORD"
#     - echo "$CI_REGISTRY_IMAGE"
#     - echo "$CI_COMMIT_REF_SLUG"
#   dependencies:
#     - generate

# dependency_check:
#   stage: security
#   image: node:18
#   script:
#     - npm ci
#     - npm run deps:update
#     # - npm audit --production
#     # - npm outdated || true
#     - npm run deps:check || true
#   only:
#     - merge_requests
#     - main
#     - develop
#   allow_failure: true

# docker_scan:
#   stage: docker-scan
#   image: docker:latest
#   services:
#     - docker:dind
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
#   script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#     - docker build -f sparkfit_backend/Dockerfile -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
#     - docker scan --accept-license "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" || true
#   allow_failure: true
#   needs: [build_docker]

# build_docker:
#   stage: build
#   needs: [test]
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
#   image: docker:latest
#   services:
#     - docker:dind
#   variables:
#     DOCKER_HOST: tcp://docker:2375
#     DOCKER_TLS_CERTDIR: ''
#   script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#     - docker build -f sparkfit_backend/Dockerfile -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
#     - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"

# deploy_staging:
#   stage: deploy-staging
#   image: node:18
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop"'
#   script:
#     - echo "Trigger Render staging deploy"
#     - curl -X POST "https://api.render.com/deploy/$RENDER_SERVICE_ID?key=$RENDER_DEPLOY_KEY"

# deploy:
#   stage: deploy
#   image: node:18
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#   script:
#     - echo "Trigger Render deploy"
#     - curl -X POST "https://api.render.com/deploy/$RENDER_SERVICE_ID?key=$RENDER_DEPLOY_KEY"

# rollback:
#   stage: rollback
#   image: docker:latest
#   services:
#     - docker:dind
#   when: manual
#   script:
#     - echo "Rolling back to previous Docker image..."
#     - PREV_TAG=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/0/tags" | jq -r '.[1].name')
#     - docker pull "$CI_REGISTRY_IMAGE:$PREV_TAG"
#     - docker tag "$CI_REGISTRY_IMAGE:$PREV_TAG" "$CI_REGISTRY_IMAGE:latest"
#     - docker push "$CI_REGISTRY_IMAGE:latest"

mirror_to_github:
  stage: mirror
  image: alpine/git:2.36.2
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop")'
    - if: '$CI_COMMIT_TAG'
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: '0'
    GIT_CHECKOUT: 'false'
  before_script:
    - echo "Vérification des variables d'environnement..."
    - '[ -n "$GITHUB_USER" ] || { echo "❌ GITHUB_USER manquant dans les variables CI/CD"; exit 1; }'
    - '[ -n "$GITHUB_TOKEN" ] || { echo "❌ GITHUB_TOKEN manquant dans les variables CI/CD"; exit 1; }'
    - echo "✅ Variables GitHub configurées"
    - echo "Branche actuelle:" $CI_COMMIT_BRANCH
    - echo "Tag actuel:" $CI_COMMIT_TAG
    - echo "SHA du commit:" $CI_COMMIT_SHA
  script:
    - cd $CI_PROJECT_DIR
    - echo "📂 Répertoire de travail:" $(pwd)
    - echo "📋 Contenu du répertoire:"
    - ls -la
    - echo "🔧 Configuration Git..."
    - git config --global user.name "GitLab CI"
    - git config --global user.email "ci@gitlab.com"
    - git config --global init.defaultBranch main
    - echo "🔗 Suppression et ajout du remote GitHub..."
    - git remote remove github 2>/dev/null || echo "Remote github n'existe pas encore"
    - git remote add github "https://$GITHUB_USER:$GITHUB_TOKEN@github.com/JSFlobert170/Sparkfit_Backend_Mirror.git"
    - git remote -v
    - echo "📥 Récupération des informations du dépôt GitHub..."
    - git fetch github --unshallow 2>/dev/null || git fetch github || echo "Première synchronisation"
    - |
      if [ -n "${CI_COMMIT_BRANCH:-}" ]; then
        echo "🌿 Synchronisation de la branche: $CI_COMMIT_BRANCH"
        echo "📍 Positionnement sur la branche locale..."
        git checkout -B "$CI_COMMIT_BRANCH" "$CI_COMMIT_SHA"
        echo "📤 Push vers GitHub..."
        git push github "$CI_COMMIT_BRANCH" --force-with-lease=refs/heads/$CI_COMMIT_BRANCH:refs/remotes/github/$CI_COMMIT_BRANCH || git push github "$CI_COMMIT_BRANCH" --force
        echo "✅ Branche $CI_COMMIT_BRANCH synchronisée avec succès"
      fi
    - |
      if [ -n "${CI_COMMIT_TAG:-}" ]; then
        echo "🏷️  Synchronisation du tag: $CI_COMMIT_TAG"
        echo "📍 Positionnement sur le tag..."
        git checkout "$CI_COMMIT_TAG"
        echo "📤 Push du tag vers GitHub..."
        git push github "refs/tags/$CI_COMMIT_TAG" --force-with-lease || git push github "refs/tags/$CI_COMMIT_TAG" --force
        echo "✅ Tag $CI_COMMIT_TAG synchronisé avec succès"
      fi
    - echo "🎉 Synchronisation terminée avec succès !"
  after_script:
    - echo "🧹 Nettoyage des credentials..."
    - git remote remove github 2>/dev/null || true
  allow_failure: false

release:
  stage: release
  image: node:18
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"'
  script:
    - npm ci
    - npx semantic-release
  variables:
    GITLAB_TOKEN: $GITLAB_TOKEN
