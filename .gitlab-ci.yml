# GitLab CI/CD Pipeline pour SparkFit Backend
# Se d√©clenche uniquement sur les branches develop et main

stages:
  - test
  - build

variables:
  # Variables globales
  NODE_VERSION: "18"
  POSTGRES_VERSION: "14"
  
  # Variables d'environnement pour les tests
  NODE_ENV: "test"
  JWT_SECRET: "test-secret-key"
  PORT: "3001"
  DATABASE_URL: "postgresql://testuser:testpassword@postgres-test:5432/testdb"

# Cache pour les d√©pendances Node.js
cache:
  key: 
    files:
      - sparkfit_backend/package-lock.json
  paths:
    - sparkfit_backend/node_modules/
    - .npm/

# Service PostgreSQL pour les tests
services:
  - name: postgres:14
    alias: postgres-test
    variables:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword

# Job de test
test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  only:
    - develop
    - main
  except:
    - tags
  before_script:
    # Installer les d√©pendances syst√®me n√©cessaires
    - apk add --no-cache git
    
    # Aller dans le r√©pertoire backend
    - cd sparkfit_backend
    
    # Installer les d√©pendances
    - npm ci
    
    # Installer Prisma CLI
    - npm install -g prisma
    
    # Copier le sch√©ma Prisma depuis le r√©pertoire parent
    - cp ../sparkfit_prisma-schema/schema.prisma ./prisma/schema.prisma
    - cp -r ../sparkfit_prisma-schema/migrations ./prisma/
    
    # G√©n√©rer le client Prisma
    - npx prisma generate --schema=./prisma/schema.prisma
    
    # Attendre que PostgreSQL soit pr√™t
    - echo "Attente de PostgreSQL..."
    - while ! nc -z postgres-test 5432; do sleep 1; done
    
    # Appliquer les migrations de test
    - npx prisma migrate deploy --schema=./prisma/schema.prisma
    
    # V√©rifier la connexion √† la base de donn√©es
    - npx prisma db push --schema=./prisma/schema.prisma --accept-data-loss
  script:
    # Ex√©cuter les tests avec couverture
    - npm run test:coverage
    
    # V√©rifier que les tests passent
    - echo "‚úÖ Tous les tests sont pass√©s avec succ√®s"
  after_script:
    # Nettoyer les donn√©es de test
    - npx prisma migrate reset --schema=./prisma/schema.prisma --force
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: sparkfit_backend/coverage/cobertura-coverage.xml
    paths:
      - sparkfit_backend/coverage/
    expire_in: 1 week
    when: always
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: always

# Job de build
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  only:
    - develop
    - main
  except:
    - tags
  before_script:
    # Se connecter au daemon Docker
    - docker info
  script:
    # Construire l'image Docker
    - echo "üî® Construction de l'image Docker..."
    - docker build -t sparkfit-backend:$CI_COMMIT_SHA -t sparkfit-backend:latest -f sparkfit_backend/Dockerfile .
    
    # V√©rifier que l'image a √©t√© construite
    - docker images | grep sparkfit-backend
    
    # Test de l'image (v√©rification de base)
    - echo "üß™ Test de l'image Docker..."
    - docker run --rm --name test-container sparkfit-backend:$CI_COMMIT_SHA node --version
    
    # Nettoyer les images temporaires
    - docker image prune -f
  after_script:
    # Nettoyer les images de test
    - docker rmi sparkfit-backend:$CI_COMMIT_SHA || true
    - docker rmi sparkfit-backend:latest || true
  artifacts:
    paths:
      - docker-images/
    expire_in: 1 week
    when: on_success
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: always

# Job de validation du code (optionnel)
lint:
  stage: test
  image: node:${NODE_VERSION}-alpine
  only:
    - develop
    - main
  except:
    - tags
  before_script:
    - cd sparkfit_backend
    - npm ci
  script:
    # V√©rifier la syntaxe JavaScript
    - echo "üîç Validation de la syntaxe JavaScript..."
    - node -c src/app.js
    - node -c src/controllers/*.js
    - node -c src/routes/*.js
    - node -c src/middlewares/*.js
    
    # V√©rifier les imports
    - echo "üì¶ Validation des imports..."
    - node -e "require('./src/app.js'); console.log('‚úÖ Tous les imports sont valides')"
    
    # V√©rifier la configuration Prisma
    - echo "üóÑÔ∏è Validation du sch√©ma Prisma..."
    - npx prisma validate --schema=../sparkfit_prisma-schema/schema.prisma
    
    echo "‚úÖ Validation du code termin√©e"
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: always 