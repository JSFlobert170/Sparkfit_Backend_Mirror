# Configuration GitLab CI/CD - Variables d'Environnement
# Copier ce fichier vers .env et remplir les valeurs appropriées

# =============================================================================
# VARIABLES DE BASE
# =============================================================================

# Base de données de test
DATABASE_URL=postgresql://myuser:mypassword@localhost:5432/test_database

# JWT pour les tests
JWT_SECRET=test-secret-key-change-in-production

# Port pour les tests
PORT=3001

# =============================================================================
# VARIABLES DE DÉPLOIEMENT STAGING
# =============================================================================

# Serveur de staging
STAGING_HOST=staging.sparkfit.com
STAGING_USER=deploy
STAGING_PATH=/opt/sparkfit/backend

# Clé SSH pour staging (contenu de la clé privée)
STAGING_SSH_PRIVATE_KEY=-----BEGIN OPENSSH PRIVATE KEY-----
# Insérer ici le contenu de votre clé SSH privée pour staging
-----END OPENSSH PRIVATE KEY-----

# Known hosts pour staging
STAGING_SSH_KNOWN_HOSTS=staging.sparkfit.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC...

# =============================================================================
# VARIABLES DE DÉPLOIEMENT PRODUCTION
# =============================================================================

# Serveur de production
PRODUCTION_HOST=api.sparkfit.com
PRODUCTION_USER=deploy
PRODUCTION_PATH=/opt/sparkfit/backend

# Clé SSH pour production (contenu de la clé privée)
PRODUCTION_SSH_PRIVATE_KEY=-----BEGIN OPENSSH PRIVATE KEY-----
# Insérer ici le contenu de votre clé SSH privée pour production
-----END OPENSSH PRIVATE KEY-----

# Known hosts pour production
PRODUCTION_SSH_KNOWN_HOSTS=api.sparkfit.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC...

# =============================================================================
# VARIABLES OPTIONNELLES
# =============================================================================

# Notifications Slack (optionnel)
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX

# Registry Docker personnalisé (si différent de GitLab)
# CI_REGISTRY=registry.gitlab.com
# CI_REGISTRY_USER=gitlab-ci-token
# CI_REGISTRY_PASSWORD=$CI_JOB_TOKEN

# =============================================================================
# VARIABLES DE SÉCURITÉ
# =============================================================================

# Niveau d'audit de sécurité npm
NPM_AUDIT_LEVEL=moderate

# Variables pour les tests de sécurité
SECURITY_SCAN_ENABLED=true
VULNERABILITY_THRESHOLD=moderate

# =============================================================================
# VARIABLES DE MONITORING
# =============================================================================

# Prometheus (si utilisé)
PROMETHEUS_ENABLED=true
PROMETHEUS_PORT=9090

# Grafana (si utilisé)
GRAFANA_ENABLED=true
GRAFANA_PORT=3000

# =============================================================================
# NOTES IMPORTANTES
# =============================================================================

# 1. Ne jamais commiter ce fichier avec des vraies valeurs
# 2. Utiliser les variables d'environnement GitLab pour les vraies valeurs
# 3. Toutes les clés SSH doivent être protégées
# 4. Les mots de passe doivent être chiffrés
# 5. Vérifier les permissions des clés SSH sur les serveurs

# =============================================================================
# COMMANDES UTILES
# =============================================================================

# Générer une nouvelle clé SSH :
# ssh-keygen -t rsa -b 4096 -C "gitlab-ci@sparkfit.com"

# Ajouter la clé publique au serveur :
# ssh-copy-id -i ~/.ssh/id_rsa.pub deploy@staging.sparkfit.com

# Obtenir les known_hosts :
# ssh-keyscan -H staging.sparkfit.com

# Tester la connexion SSH :
# ssh -i ~/.ssh/id_rsa deploy@staging.sparkfit.com 